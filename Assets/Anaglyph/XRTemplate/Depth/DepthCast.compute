// https://github.com/oculus-samples/Unity-DepthAPI/issues/16
#include "DepthKit.hlsl"

#pragma kernel CSMain

struct RaycastResult
{
	float ZDepthDiff;
	float3 Position;
	float3 Normal;
};

#if defined(SHADER_API_D3D11) 
#define FLIP_UVS 1 
#endif

StructuredBuffer<float3> RaycastRequests;
RWStructuredBuffer<RaycastResult> RaycastResults;

float3 WorldStart;
float3 WorldEnd; 
int NumSamples;

[numthreads(32, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) 
{
	const uint slice = 0;
	const uint i = id.x;
	
	float rayDist = i / (float) NumSamples;
	 
	float4 rayPos = float4(lerp(WorldStart, WorldEnd, rayDist), 1);
	
	float4 rayInDepthHCS = mul(dk_DepthTexReprojMatrices[slice], rayPos);
	float2 rayInDepthUV = HCStoNDC(rayInDepthHCS).xy;

    float envDepth = SampleDepth(rayInDepthUV, 0);
	
    float4 depthPosHCS = NDCtoHCS(float3(rayInDepthUV, envDepth), rayInDepthHCS.w);
    float4 depthPosWorld = HCStoWorld(depthPosHCS, slice);
	
    float envDepthNDC = envDepth * 2.0 - 1.0;
    RaycastResults[i].ZDepthDiff = envDepthNDC - rayInDepthHCS.z / rayInDepthHCS.w;
	
    RaycastResults[i].Position = depthPosWorld.xyz;
	RaycastResults[i].Normal = float3(0, 1, 0);
}