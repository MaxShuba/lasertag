// https://github.com/oculus-samples/Unity-DepthAPI/issues/16
#include "DepthKit.hlsl"

#pragma kernel CSMain

struct RaycastResult
{
	float ZDepthDiff;
	float3 Position;
	float3 Normal;
};

#if defined(SHADER_API_D3D11) 
#define FLIP_UVS 1 
#endif

StructuredBuffer<float3> RaycastRequests;
RWStructuredBuffer<RaycastResult> RaycastResults;

float3 WorldStart;
float3 WorldEnd; 
int NumSamples;

[numthreads(32, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	const uint slice = 0;
	const uint i = id.x;
	
	float rayDist = i / (float) NumSamples;

	float4 rayPos = float4(lerp(WorldStart, WorldEnd, rayDist), 1);
	
	float4 rayInDepthHCS = mul(dk_DepthTexReprojMatrices[slice], rayPos);
	float2 rayInDepthUV = HCStoUV(rayInDepthHCS);

	float envDepth = dk_DepthTexture.SampleLevel(trilinearClampSampler, float3(rayInDepthUV, slice), 0); 
    float envDepthNDC = envDepth * 2.0 - 1.0;
	
    float4 hitInDepthHCS = UVtoHCS(rayInDepthUV, 1, rayInDepthHCS.w);
    float4 hitPos = mul(dk_InvDepthTexReprojMatrices[slice], float4(hitInDepthHCS.xy, rayInDepthHCS.zw));
	
	
	//float envDepthMeters = -ApplyMatrixDK(rayInDepthUV, envDepth, dk_StereoMatrixInvP[slice]).z;
	//float rayDepthMeters = -mul(dk_StereoMatrixV[slice], rayPos).z;
    RaycastResults[i].ZDepthDiff = envDepthNDC - rayInDepthHCS.z / rayInDepthHCS.w;
	
    RaycastResults[i].Position = hitPos;
	RaycastResults[i].Normal = (0, 1, 0); // i'll fix this later
}