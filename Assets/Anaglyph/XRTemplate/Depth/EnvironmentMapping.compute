#include "../Depth/DepthKit.hlsl"

uniform uint3 volumeSize; // dimensions of volume texture
uniform float metersPerVoxel;
RWTexture3D<half> volume; // tsdf
StructuredBuffer<float3> frustumVolume;
// RWStructuredBuffer<half> lastIntegration;

float3 voxelToWorld(uint3 indices)
{
	float3 pos = indices;
	pos -= volumeSize / 2.0f;
	
	return pos * metersPerVoxel;
}

uint3 worldToVoxel(float3 pos)
{
	pos /= metersPerVoxel;
	pos += volumeSize / 2.0f;
	
	uint3 id = uint3(pos);
	id = clamp(id, 0, volumeSize);
	return id;
}

float3 worldToVoxelUVW(float3 pos)
{	
	pos /= metersPerVoxel;
	pos += volumeSize / 2.0f;
	pos /= volumeSize;
	return saturate(pos);;
}

#pragma kernel Clear

[numthreads(4, 4, 4)]
void Clear(uint3 id : SV_DispatchThreadID)
{
	volume[id] = metersPerVoxel; 
}


#pragma kernel Integrate
 
[numthreads(64, 1, 1)]
void Integrate (uint i : SV_DispatchThreadID)
{
	float3 vLocalPos = frustumVolume[i];
	float3 vWorldPos = mul(agDepthViewInv[0], float4(vLocalPos, 1));
	uint3 id = worldToVoxel(vWorldPos);
	
	float3 eyePos = agDepthEyePos();
	float3 voxPos = voxelToWorld(id);
	
	float4 voxHCS = agDepthWorldToHCS(voxPos);
	float3 voxNDC = agDepthHCStoNDC(voxHCS);
	
	float depth = agDepthSample(voxNDC.xy);
	float3 depthNDC = float3(voxNDC.xy, depth);
	float3 depthPos = agDepthNDCtoWorld(depthNDC);
	
	float voxEyeDist = distance(voxPos, eyePos);
	float depthEyeDist = distance(depthPos, eyePos);
	
	half sDist = depthEyeDist - voxEyeDist;
	sDist = min(sDist, metersPerVoxel);
	
	if (sDist > -metersPerVoxel)
		volume[id] = sDist;
	// lastIntegration[i] = sDist;
}





#pragma kernel Raycast

/// Raycast

uniform float3 rcOrig; 
uniform float3 rcDir;
uniform float rcIntScale;
RWStructuredBuffer<uint> rcResult;
Texture3D<half> rcVolume;
SamplerState linearClampSampler;

half sampleVolume(float3 uvw)
{
	return rcVolume.SampleLevel(linearClampSampler, uvw, 0);
}

[numthreads(64, 1, 1)]
void Raycast(uint3 id : SV_DispatchThreadID)
{
	float3 startPos = rcOrig + rcDir * metersPerVoxel * id.x;
	float3 worldPos = startPos;
	
	// each thread does a mini raymarch through the TSDF
	for (int i = 0; i < 3; i++)
	{
		float3 uvw = worldToVoxelUVW(worldPos);
		half signedDistance = sampleVolume(uvw);
		worldPos += rcDir * signedDistance;
	}
	
	float3 uvw = worldToVoxelUVW(worldPos);
	half signedDistance = sampleVolume(uvw);
	
	float distanceFromCenter = distance(worldPos, rcOrig);
	uint distFromCenterInt = distanceFromCenter * rcIntScale;
	
	if (abs(signedDistance) < 0.02f)
		InterlockedMin(rcResult[0], distFromCenterInt);
}