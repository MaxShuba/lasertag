// https://github.com/oculus-samples/Unity-DepthAPI/issues/16
#include "../Depth/DepthKit.hlsl"
#include "../Environment/Environment.hlsl"

#pragma kernel Scan           // 0
#pragma kernel Apply          // 1
#pragma kernel ClearHeightMap // 2

RWStructuredBuffer<int> _PerFrameScan; // should be 32bit signed int
RWTexture2D<float2> _HeightMap; 

uint _TexSize;
uint _DepthSamples;

float2 _DepthRange;
float2 _HeightRange;

float _EdgeFilterSize;
float _GradientCutoff;

float _LerpHeight;

float _WallMinHeight;

#define HEIGHT_INT_FACTOR 100
#define PER_FRAME_UNWRITTEN 0

#define VERTI uint2(0, 1)
#define HORIZ uint2(1, 0)

uint CoordToIndex(uint2 coord)
{
	return coord.y * _TexSize + coord.x;
}

bool WorldWithinFrame(float3 world)
{
	float2 ndc = agDepthWorldToNDC(world).xy;
	return all(ndc.xy > float2(0, 0)) && all(ndc.xy < float2(1, 1));
}

float IntToFloatHeight(int height)
{
	return float(height) / HEIGHT_INT_FACTOR;
}

int FloatToIntHeight(float height) 
{
	return height * HEIGHT_INT_FACTOR;
}

[numthreads(64, 1, 1)]
void Scan(uint3 id : SV_DispatchThreadID)
{
	float2 depthUV = float2(id.xy) / _DepthSamples;
	float depth = saturate(agDepthSample(depthUV));
	float3 depthWorld = agDepthNDCtoWorld(float3(depthUV, depth));
	float height = depthWorld.y;
	int intHeight = FloatToIntHeight(depthWorld.y);
	
	float2 uv = saturate(agEnvWorldToUV(depthWorld));
	uint2 mapCoord = uint2(uv * _TexSize); //round(uv * _TexSize);
	uint index = CoordToIndex(mapCoord);
	
	// within valid height range 
	
	float3 depthCameraPos = agDepthViewInv[0]._m03_m13_m23;
	// float3 depthCameraPos = mul(agDepthViewInv[0], float4(0, 0, 0, 1));
	
	float2 heightRangeWorld = _HeightRange + depthCameraPos.y;
	bool validY = (heightRangeWorld.x < height) && (height < heightRangeWorld.y);
	
	// within valid distance
	float dist = distance(depthWorld.xz, depthCameraPos.xz);
	bool validDistance = (_DepthRange.x < dist) && (dist < _DepthRange.y);
	
	// previous height is visible in view
    float2 heightMapVal = _HeightMap[mapCoord];
	float prevHeight = heightMapVal.r;
	bool prevWritten = heightMapVal.g != 0;
	float3 prevWorldPos = float3(depthWorld.x, prevHeight, depthWorld.z);
	bool prevHeightInView = WorldWithinFrame(prevWorldPos) || !prevWritten;
	
	bool valid = validY && validDistance && prevHeightInView;
	
	if (!valid)
		return;
	
    InterlockedMax(_PerFrameScan[index], intHeight);
}

[numthreads(8, 8, 1)]
void Apply(uint3 id : SV_DispatchThreadID)
{
	uint index = CoordToIndex(id.xy);
    int intHeight = _PerFrameScan[index];
	
	bool wasWritten = intHeight != PER_FRAME_UNWRITTEN;
	
    float2 heightMapVal = _HeightMap[id.xy]; // r = height, g = is written
	float r = IntToFloatHeight(intHeight);
	bool g = heightMapVal.g || wasWritten;
	
	if(!wasWritten)
		return;
	
    _HeightMap[id.xy] = float2(r, g);
    _PerFrameScan[index] = PER_FRAME_UNWRITTEN;
}

[numthreads(8, 8, 1)]
void ClearHeightMap(uint3 id : SV_DispatchThreadID)
{
    _HeightMap[id.xy] = 0;
}